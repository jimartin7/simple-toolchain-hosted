version: '2'
messages:
  $i18n: locales.yml
template:
  name:
    $ref: "#/messages/template.name"
  description:
    #original static description:
    #$ref: "#/messages/template.description"
    #template descriptions now vary depending on the flavor of source provider selected
    $ref: >
      $env.source_provider === 'githubconsolidated' ? 
      '#/messages/template.description.github' : '#/messages/template.description'
  header: '![](toolchain.svg?localize)'
  icon: icon.svg
  required:
    - sample-build
    - sample-repo
  info:
    #original static git url and branch string definitions
    #git url: >-
    #  [https://github.com/open-toolchain/simple-toolchain-hosted](https://github.com/open-toolchain/simple-toolchain-hosted)
    #git branch: >-
    #  [master](https://github.com/open-toolchain/simple-toolchain-hosted/tree/master)
    
    # compute the git url and branch values dynamically so that they remain correct when repo is forked etc. 
    # note: `repository` url param must always be provided while the `branch` url param is optional
    # the computed urls are of the same format as the original static urls shown above
    git url: >-
        [https://github.com/jimartin7/simple-toolchain-hosted](https://github.com/jimartin7/simple-toolchain-hosted)
    git branch: >-
        [master](https://github.com/jimartin7/simple-toolchain-hosted/tree/master)
toolchain:
  name: 'my-custom-toolchain-{{timestamp}}'
  template:
    getting_started:
      $ref: "#/messages/template.gettingStarted"
services:
  sample-repo: #T he 1st service section defines a range of git providers
    service_id: >
      $env.source_provider ? $env.source_provider : 'hostedgit'
    parameters:
      repo_name: '{{toolchain.name}}'
      repo_url: >
        $env.type === 'link' ? 
          $env.app_repo : 'https://github.com/open-toolchain/node-hello-world' #url del cÃ³digo a incluir por defecto con el toolchain, se puede cambiar la url
      source_repo_url: >
        $env.type === 'fork' || $env.type === 'clone' ? 
          $env.app_repo : 'https://github.com/open-toolchain/node-hello-world'
      type: $env.type || 'clone'
      has_issues: true
      enable_traceability: true
  sample-build: # The 2nd service section is about the pipeline
    service_id: pipeline
    parameters:
      services:
        - sample-repo
      name: '{{services.sample-repo.parameters.repo_name}}'
      ui-pipeline: true
      configuration:
        content:
          $text: pipeline.yml # The details for the pipeline are defined in the pipeline.yml file
        env:
          SAMPLE_REPO: sample-repo # The sample-repo name is the name for the source sample repo that is defined in the sample-repo subsection
          CF_APP_NAME: '{{form.pipeline.parameters.prod-app-name}}'
          PROD_SPACE_NAME: '{{form.pipeline.parameters.prod-space}}'
          PROD_ORG_NAME: '{{form.pipeline.parameters.prod-organization}}'
          PROD_REGION_ID: '{{form.pipeline.parameters.prod-region}}'
          API_KEY: '{{form.pipeline.parameters.api-key}}'
        execute: true
  webide:
    service_id: orion # subsection for the Eclipse Orion Web IDE. This subsection is simple because the Web IDE doesn't require configuration
form: # defines the form to use for the pipeline
  pipeline:
    parameters:
      prod-app-name: '{{services.sample-repo.parameters.repo_name}}' # The default app name is defined; the repo-name name from the sample-repo service is used as a default
    schema:
      $ref: deploy.json # the deploy.json file defines form inputs from the user. In the UI for Delivery Pipeline
